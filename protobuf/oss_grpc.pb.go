// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: oss.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenSecretShareClient is the client API for OpenSecretShare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenSecretShareClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Recieve(ctx context.Context, in *RecieveRequest, opts ...grpc.CallOption) (*RecieveResponse, error)
	GetPublicKey(ctx context.Context, in *GetPubKeyRequest, opts ...grpc.CallOption) (*GetPubKeyResponse, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
}

type openSecretShareClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenSecretShareClient(cc grpc.ClientConnInterface) OpenSecretShareClient {
	return &openSecretShareClient{cc}
}

func (c *openSecretShareClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/protobuf.OpenSecretShare/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSecretShareClient) Recieve(ctx context.Context, in *RecieveRequest, opts ...grpc.CallOption) (*RecieveResponse, error) {
	out := new(RecieveResponse)
	err := c.cc.Invoke(ctx, "/protobuf.OpenSecretShare/Recieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSecretShareClient) GetPublicKey(ctx context.Context, in *GetPubKeyRequest, opts ...grpc.CallOption) (*GetPubKeyResponse, error) {
	out := new(GetPubKeyResponse)
	err := c.cc.Invoke(ctx, "/protobuf.OpenSecretShare/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openSecretShareClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/protobuf.OpenSecretShare/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenSecretShareServer is the server API for OpenSecretShare service.
// All implementations must embed UnimplementedOpenSecretShareServer
// for forward compatibility
type OpenSecretShareServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Recieve(context.Context, *RecieveRequest) (*RecieveResponse, error)
	GetPublicKey(context.Context, *GetPubKeyRequest) (*GetPubKeyResponse, error)
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	mustEmbedUnimplementedOpenSecretShareServer()
}

// UnimplementedOpenSecretShareServer must be embedded to have forward compatible implementations.
type UnimplementedOpenSecretShareServer struct {
}

func (UnimplementedOpenSecretShareServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedOpenSecretShareServer) Recieve(context.Context, *RecieveRequest) (*RecieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recieve not implemented")
}
func (UnimplementedOpenSecretShareServer) GetPublicKey(context.Context, *GetPubKeyRequest) (*GetPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedOpenSecretShareServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedOpenSecretShareServer) mustEmbedUnimplementedOpenSecretShareServer() {}

// UnsafeOpenSecretShareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenSecretShareServer will
// result in compilation errors.
type UnsafeOpenSecretShareServer interface {
	mustEmbedUnimplementedOpenSecretShareServer()
}

func RegisterOpenSecretShareServer(s grpc.ServiceRegistrar, srv OpenSecretShareServer) {
	s.RegisterService(&OpenSecretShare_ServiceDesc, srv)
}

func _OpenSecretShare_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSecretShareServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OpenSecretShare/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSecretShareServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSecretShare_Recieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSecretShareServer).Recieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OpenSecretShare/Recieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSecretShareServer).Recieve(ctx, req.(*RecieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSecretShare_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSecretShareServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OpenSecretShare/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSecretShareServer).GetPublicKey(ctx, req.(*GetPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenSecretShare_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSecretShareServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OpenSecretShare/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSecretShareServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenSecretShare_ServiceDesc is the grpc.ServiceDesc for OpenSecretShare service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenSecretShare_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.OpenSecretShare",
	HandlerType: (*OpenSecretShareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _OpenSecretShare_Initialize_Handler,
		},
		{
			MethodName: "Recieve",
			Handler:    _OpenSecretShare_Recieve_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _OpenSecretShare_GetPublicKey_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _OpenSecretShare_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oss.proto",
}
